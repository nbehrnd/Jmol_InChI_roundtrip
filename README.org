# name:     README
# author:   nbehrnd@yahoo.com
# license:  GPLv2, 2022
# date:     <2022-03-03 Thu>
# edit:     <2022-03-09 Wed>

* Intent

  Jmol allows to read multiple models of a ~.sdf~ file, and to assign SMILES and
  InChI strings locally.  The locally assigned InChI string may be sent to a NIH
  server to reconstruct a ~.sdf~ which Jmol may assign again SMILES and InChI.
  For the purpose of this project, this cycle is called "InChI round trip".

  The question of this project is: Do SMILES assigned by Jmol /prior/ and
  /after/ the conversion to InChI and the reconstruction of the structure
  represent the same structure?  If the SMILES strings are found to be invariant
  in during The "InChI round trip", the processing qualifies as "successful",
  else as "failing".

  Jmol is aware of InChI with a fixed H-layer which allows Jmol to identify
  tautomers.  Though InChI with fixed H-layer are not standard InChI, their use
  appears as more conservative (i.e., potentially retaining more information)
  than standard InChI.

* Tools at disposition

  + DataWarrior (basic version 5.5.0 for Linux, updated by <2022-01-24 Mon>);
    generation of libraries of random/drug-like molecules, exported as ~.sdf~
    (v2000 format).
  + Jmol (by <2022-03-03 Thu>, this is version 14.32.28)
  + Jmol scripts (~*.spt~) to automate Jmol for the local assignment of SMILES,
    InChI, interaction of Jmol with the remote NIH server.  These evolved from
    project [[https://github.com/nbehrnd/inchi_roundtrip][inchi_roundtrip]], commitsha ~31794ca~.
  + ~sort.awk~, an AWK script to sort the intermediate log by Jmol.

* Analysis

  The round trip is prepared by the generation of random/drug-like molecules
  (DataWarrior) and subsequent generation of conformers; the later are saved as
  ~molecules.sdf~ (v2000).  The pristine ~.zip~ archive of Jmol is decompressed,
  the container file and scripts are added.  The executable bit is provided
  globally by

  #+begin_src bash :tangle no
chmod u+x *
  #+end_src

  While connected with the remote NIH server, the round trip is performed in the
  pattern of e.g.,

  #+begin_src bash :tangle no
./Jmol.jar -ions jmol_roundtrip_smiles.spt > logfile.log
  #+end_src

  The intermediate results stored in the log file are processed

  #+begin_src bash :tangle no
./sort.awk logfile.log
  #+end_src

  and content stored in file ~failing.txt~ are copy-pasted for visual inspection
  into the input mask of [[https://www.simolecule.com/cdkdepict/depict.html][cdkdepict]].  The display uses cdkdepict's optional
  toggle "CIP stereo label"

** Set of 100 molecules

   Depending on the criterion applied, out of the 100 molecules submitted, there
   are 3 (~smiles~), 99 (~inchi_a~), or 1 entry (~inchi_b~) failing the round
   trip, i.e. with changing SMILES, or InChI string.

   However, the current approach to probe the InChI strings /as such/ does not
   seem to be a reliable enough to check if NIH's reconstruction of a structure
   departing from an InChI string; many (but not all) structures with Jmol's
   assigned SMILES prior and after the round trip displayed as formulae in
   CDKDepict do appear identical in constitution and absolute configuration.

   As revealed by monitoring the SMILES strings, nitro groups may undergo a
   transformation to yield one of the two oxygens protonated.  These are seen as
   failing entries in the series of ~inchi_a~, too.  The second motif identified
   as problematic are esters of phosphoric acid; the round trip may yield an
   inversion of the absolute configuration around the chiral centre (P).

** Set of 1003 molecules

   Monitoring either SMILES (~smiles~) or InChI (~inchi_b~, comparison of
   ~d.inchi~ vs. ~secondary_inchi~), a larger set of 1003 entries was submitted
   to the round trip.  During the round trip, for 961 entries (95.8%) and
   invariant SMILES string was observed.  For 954 entries (95.1%), the InChI
   string prior the round trip matched the one after NIH's reconstruction.

   CDKDepict's visualization of formulae by SMILES strings prior/after about
   failed round trips reveal imines as problematic (interconversion of (E) to
   (Z) configuration).

   On occasion, the representation of N-heteroaromatic cycles (e.g., imidazole,
   pyrimidine) with radical dot and Thiele ring, e.g. for
   #+begin_quote
   [S@@](O)(=O)(=O)CC(=O)OC(=O)c1c2[n](C)c3[n]1CC(=O)OC(=O)c4ccccc4.C2O.C3OC
   CN1[C]2N3C4=C1CO.C3C(=O)OC(=O)c5ccccc5.C2OC.C4(=O)OC(=O)C[S@](=O)(=O)O

   Oc1c(O)c2ccccc2[n]c1C1=CNc2c(O)[n]c(C)[n]([O])c21
   #+end_quote
   from file ~failing_1003_mol_smiles.log~ is surprising; the cause is not yet
   identified.
   
* Jmol scripts, awk script

  This section contains the Jmol and AKW scripts eventually tangled/exported.

  + check by SMILES

    The following Jmol script considers a Jmol InChI round trip successful if
    Jmol's SMILES string is invariant.  I.e., this is a comparison of the SMILES
    locally assigned based of the data array prior vs. Jmol's SMILES after NIH's
    structure reconstruction.

    #+begin_src js :tangle jmol_roundtrip_smiles.spt
// name:    jmol_roundtrip_smiles.spt
// author:  nbehrnd@yahoo.com 
// licence: GPLv2, 2022
// date:    2022-02-25 (YYYY-MM-DD)
// edit:    2022-03-08 (YYYY-MM-DD)
//
// Thanks to continous constructive criticism by Robert Hanson.
//
// Deposit this script in the folder of Jmol.jar and molecules.sdf.  After
// provison of the executable bit, run 
//
// ./Jmol.jar -ions jmol_roundtrip_smiles.spt > record.txt
//
// File molecules.sdf (in v2000 format) contains the models to process.
// The record file lists the entry counter, success/failing label, SMILES
// prior and after the round trip edit by Jmol and the remote NIH server.
// For each individually probed model in the .sdf, the round trip is labeled
// "success" if SMILES are invariant to the round trip; else "failing".

load MODELS {0, -1, 1} "molecules.sdf";
var n = {*}.model.max;  // length of the model list

var cdata = [];
for (var i = 1; i <= n; i++){
    frame @i;
    primary_inchi = "";
    secondary_inchi = "";
    intermediate_smiles = "";
    monitor_smiles_a = "";
    monitor_smiles_b = "";
    load_string = "";

 primary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_a = {thisModel}.find("smiles")
 cdata.push( { "inchi":primary_inchi, "smiles": monitor_smiles_a } )
}

for (var i = 1; i <= n; i++){
 var d = cdata[i];
 load_string = "$" + d.inchi;
 load @load_string;

 secondary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_b = {thisModel}.find("smiles")

// report back to the CLI:  4 entries, one false positif:
// print "" + i + " " + (d.smiles.find("SMILES", monitor_smiles_b) and
//   monitor_smiles_b.find("SMILES", d.smiles) and
//   (d.inchi==secondary_inchi) ? "success" : "failing") +
//   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
//   " " +  secondary_inchi;

// report back to the CLI:  4 entries, one false positif:
//print "" + i + " " + (d.smiles.find("SMILES", monitor_smiles_b) and
//   (d.inchi==secondary_inchi) ? "success" : "failing") +
//   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
//   " " +  secondary_inchi;

// reports back only the false positif
//print "" + i + " " + (
//   (primary_inchi==secondary_inchi) ? "success" : "failing") +
//   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
//   " " +  secondary_inchi;

// reports all entries as passing the round trip
//print "" + i + " " + (
//   (primary_smiles==secondary_smiles) ? "success" : "failing") +
//   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
//   " " +  secondary_inchi;

// reports 3 entries as failing the round trip, no false-positif; the best so far a
print "" + i + " " + (d.smiles.find("SMILES", monitor_smiles_b) ? "success" : "failing") +
  " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi + " " + primary_inchi + 
  " " +  secondary_inchi;

// reports 3 entries as failing the round trip, no false-positif; the best so far
// print "" + i + " " + ((primary_inchi==secondary_inchi) ? "success" : "failing") +
//  " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi + 
//  " " +  secondary_inchi;
 
// // report back to the CLI: 1 false positive (CDKDepict the same)
// print "" + i + " " + ((d.inchi==secondary_inchi) ? "success" : "failing") +
//   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
//   " " +  secondary_inchi;

}
    #+end_src

  + check by InChI, variant a

    The following script considers the round trip successful if Jmol's assigned
    InChI are invariant (~primary_inchi~ vs. ~secondary_inchi~).  This reuses
    muted sections of the previously engaged Jmol script ~jmol_sdf_b.spt~.

    #+begin_src js :tangle jmol_roundtrip_inchi_a.spt
// name:    jmol_roundtrip_inchi_a.spt
// author:  nbehrnd@yahoo.com 
// licence: GPLv2, 2022
// date:    2022-02-25 (YYYY-MM-DD)
// edit:    2022-03-08 (YYYY-MM-DD)
//
// Deposit this script in the folder of Jmol.jar and molecules.sdf.  After
// provison of the executable bit, run 
//
// ./Jmol.jar -ions jmol_roundtrip_inchi_a.spt > record.txt
//
// File molecules.sdf (in v2000 format) contains the models to process.
// The record file lists the entry counter, success/failing label, SMILES
// prior and after the round trip edit by Jmol and the remote NIH server.
// For each individually probed model in the .sdf, the round trip is labeled
// "success" if primary_inchi matches (prior round trip) and secondary_inchi
// (after round trip) match each each other; else "failing".

load MODELS {0, -1, 1} "molecules.sdf";
var n = {*}.model.max;  // length of the model list

var cdata = [];
for (var i = 1; i <= n; i++){
    frame @i;
    primary_inchi = "";
    secondary_inchi = "";
    intermediate_smiles = "";
    monitor_smiles_a = "";
    monitor_smiles_b = "";
    load_string = "";

 primary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_a = {thisModel}.find("smiles")
 cdata.push( { "inchi":primary_inchi, "smiles": monitor_smiles_a } )
}

for (var i = 1; i <= n; i++){
 var d = cdata[i];
 load_string = "$" + d.inchi;
 load @load_string;

 secondary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_b = {thisModel}.find("smiles")

// reports 3 entries as failing the round trip, no false-positif; the best so far
 print "" + i + " " + ((primary_inchi==secondary_inchi) ? "success" : "failing") +
  " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi + 
  " " +  secondary_inchi;
 
}
    #+end_src

  + check by InChI, variant b

    The following script considers the round trip successful if Jmol's assigned
    InChI are invariant (~d.inchi~ vs. ~secondary_inchi~).  It is an approach
    complementary to the one by ~jmol_roundtrip_inchi_a.spt~.  This reuses muted
    sections of the previously engaged Jmol script ~jmol_sdf_b.spt~.

    #+begin_src js :tangle jmol_roundtrip_inchi_b.spt
// name:    jmol_roundtrip_inchi_b.spt
// author:  nbehrnd@yahoo.com 
// licence: GPLv2, 2022
// date:    2022-02-25 (YYYY-MM-DD)
// edit:    2022-03-08 (YYYY-MM-DD)
//
// Deposit this script in the folder of Jmol.jar and molecules.sdf.  After
// provison of the executable bit, run 
//
// ./Jmol.jar -ions jmol_roundtrip_inchi_b.spt > record.txt
//
// File molecules.sdf (in v2000 format) contains the models to process.
// The record file lists the entry counter, success/failing label, SMILES
// prior and after the round trip edit by Jmol and the remote NIH server.
// For each individually probed model in the .sdf, the round trip is labeled
// "success" if d.inchi (prior round trip) and secondary_inchi (after NIH's
// reconstruction, i.e. round trip) match each other.  Else, it assigns the
// label  "failing".

load MODELS {0, -1, 1} "molecules.sdf";
var n = {*}.model.max;  // length of the model list

var cdata = [];
for (var i = 1; i <= n; i++){
    frame @i;
    primary_inchi = "";
    secondary_inchi = "";
    intermediate_smiles = "";
    monitor_smiles_a = "";
    monitor_smiles_b = "";
    load_string = "";

 primary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_a = {thisModel}.find("smiles")
 cdata.push( { "inchi":primary_inchi, "smiles": monitor_smiles_a } )
}

for (var i = 1; i <= n; i++){
 var d = cdata[i];
 load_string = "$" + d.inchi;
 load @load_string;

 secondary_inchi = {thisModel}.find("inchi", "fixedH");
 monitor_smiles_b = {thisModel}.find("smiles")

// report back to the CLI: 1 false positive (CDKDepict the same)
 print "" + i + " " + ((d.inchi==secondary_inchi) ? "success" : "failing") +
   " " + d.smiles + " " + monitor_smiles_b + " " + d.inchi +
   " " +  secondary_inchi;
}
    #+end_src

  + AWK script

    This script discerns round trips Jmol considers "successful" and "failing".
    In case of the later, both SMILES strings prior and after the round trip are
    reported for visual inspection e.g., on [[https://www.simolecule.com/cdkdepict/depict.html][CDKDepict]].

    #+begin_src awk :tangle sort.awk
#!/usr/bin/awk -f

# name:    sort.awk
# author:  nbehrnd@yahoo.com
# license: GPLv2, 2022
# date:    2022-03-03 (YYYY-MM-DD)
# edit:    2022-03-08 (YYYY-MM-DD)

# Jmol's report assigns the round trip either successful (i.e., both
# SMILES and InChI string are invariant), or failing.  By calling this
# awk script in pattern of
#
# awk -f sort.awk report.log
#
# `failing_report.log` and `success_report.log` written provide input
# for a visual inspection by cdkdepict.[1]  The name of this script's
# input file need not be `report.log`.
#
# [1] https://www.simolecule.com/cdkdepict/depict.html

BEGIN {print "Script sorts entries in Jmol's log according to their status."};

{if($2 == "failing"){print $3 "\n" $4 "\n" > "failing_" FILENAME}};
{if($2 == "success"){print $3 > "success_" FILENAME}};

END {print "See CDKdepict: https://www.simolecule.com/cdkdepict/depict.html"};
    #+end_src

* Content

  #+begin_src bash :exports code both :results replace code
tree  -L 1
  #+end_src

  #+RESULTS:
  #+begin_src bash
  .
  ├── 1003_molecules
  ├── 100_molecules
  ├── jmol_roundtrip_inchi_a.spt
  ├── jmol_roundtrip_inchi_b.spt
  ├── jmol_roundtrip_smiles.spt
  ├── LICENSE
  ├── README.org
  └── sort.awk

  2 directories, 6 files
  #+end_src

